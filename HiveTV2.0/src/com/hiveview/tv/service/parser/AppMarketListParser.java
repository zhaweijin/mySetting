package com.hiveview.tv.service.parser;import java.io.InputStream;import java.util.ArrayList;import java.util.HashMap;import org.json.JSONArray;import org.json.JSONException;import org.json.JSONObject;import android.util.Log;import com.hiveview.tv.service.entity.AppMarketEntity;import com.hiveview.tv.service.exception.ServiceException;import com.hiveview.tv.utils.StringUtils;public class AppMarketListParser extends BaseParser {	@Override	public ArrayList<AppMarketEntity> executeToObject(InputStream in) throws ServiceException {		ArrayList<AppMarketEntity> list = new ArrayList<AppMarketEntity>();		String jsonStr = StringUtils.converStreamToString(in);		AppMarketEntity entity;		Log.e("msg", "system app = " + jsonStr);		try {			JSONObject obj = new JSONObject(jsonStr);			// JSONObject dataObj = obj.getJSONObject("data");			errorCode = obj.optString("code");			JSONObject resultObj = obj.optJSONObject("result");			if (null == resultObj) {				return list;			}			JSONArray pageContent = resultObj.optJSONArray("pageContent");			if (null == pageContent) {				return list;			}			int count = pageContent.length();			for (int i = 0; i < count; i++) {				JSONObject object = pageContent.getJSONObject(i);				entity = new AppMarketEntity();				entity.setBundleId(object.optString("bundleId"));				entity.setAppName(object.optString("appName"));				entity.setAppIcon(object.optString("appIcon"));				entity.setTagName(object.optString("tagName"));				entity.setDeveloper(object.optString("developer"));				entity.setAppDesc(object.optString("appDesc"));				entity.setAppId(object.optInt("appId"));				entity.setSeq(object.optInt("seq"));				entity.setAppType(object.optInt("appType"));				if (!object.has("version")) {					list.add(entity);					return list;				}				JSONObject versionObj = object.getJSONObject("version");				entity.setVersionNo(versionObj.optString("versionNo"));				entity.setAppSize(versionObj.optString("appSize"));				entity.setVersionDesc(versionObj.optString("versionDesc"));				entity.setVersionUrl(versionObj.optString("versionUrl"));				entity.setCtime(versionObj.optLong("ctime"));				entity.setSize(versionObj.optString("size"));				entity.setMd5(versionObj.optString("md5"));				list.add(entity);			}		} catch (JSONException e) {			throw new ServiceException();		}		return list;	}	@Override	public String getErrorCode() {		return errorCode;	}	public HashMap<String, AppMarketEntity> executeToMap(InputStream in) throws ServiceException {		HashMap<String, AppMarketEntity> mapList = new HashMap<String, AppMarketEntity>();		String jsonStr = StringUtils.converStreamToString(in);		AppMarketEntity entity;		try {			JSONObject obj = new JSONObject(jsonStr);			// JSONObject dataObj = obj.getJSONObject("data");			errorCode = obj.getString("code");			JSONObject resultObj = obj.getJSONObject("result");			JSONArray pageContent = resultObj.getJSONArray("pageContent");			int count = pageContent.length();			for (int i = 0; i < count; i++) {				JSONObject object = pageContent.getJSONObject(i);				entity = new AppMarketEntity();				entity.setBundleId(object.optString("bundleId"));				entity.setAppName(object.optString("appName"));				entity.setAppIcon(object.optString("appIcon"));				entity.setTagName(object.optString("tagName"));				entity.setDeveloper(object.optString("developer"));				entity.setAppDesc(object.optString("appDesc"));				entity.setAppId(object.optInt("appId"));				entity.setSeq(object.optInt("seq"));				entity.setAppType(object.optInt("appType"));								if (!object.has("version")) {					mapList.put(entity.getBundleId(), entity);					return mapList;				}				JSONObject versionObj = object.getJSONObject("version");				entity.setVersionNo(versionObj.optString("versionNo"));				entity.setAppSize(versionObj.optString("appSize"));				entity.setVersionDesc(versionObj.optString("versionDesc"));				entity.setVersionUrl(versionObj.optString("versionUrl"));				entity.setCtime(versionObj.optLong("ctime"));				entity.setSize(versionObj.optString("size"));				entity.setMd5(versionObj.optString("md5"));								mapList.put(entity.getBundleId(), entity);			}		} catch (JSONException e) {			throw new ServiceException();		}		return mapList;	}}