package com.hiveview.tv.view;import java.lang.reflect.Field;import android.content.Context;import android.support.v4.view.ViewPager;import android.util.AttributeSet;import android.view.animation.AccelerateDecelerateInterpolator;import android.view.animation.Interpolator;import android.widget.Scroller;public class BasePreloadingViewPager extends ViewPager {	protected int mSelectedPageIndex = 0;	protected boolean isSecondToLastPage = false;		protected Context mContext;	protected OnPreloadingListener listener;	protected boolean isLoading = false;	//预加载的步长 	protected int MAX_NUM = 2;		public void setPreLoadingListener(OnPreloadingListener listener){		this.listener = listener;	}		public BasePreloadingViewPager(Context context, AttributeSet attrs) {		super(context, attrs);		this.mContext = context;		init();		changeViewPageScroller();	}		public BasePreloadingViewPager(Context context) {		super(context);		this.mContext = context;		init();		changeViewPageScroller(); 	}		protected void currentView(){			};		private void init(){		this.setOnPageChangeListener(new MyOnPageChangeListener());	}			public interface OnPreloadingListener{		//得到当前页数		void getPagerNum(int pagerNum);				//预加载		void preLoading();				/**此方法是在状态改变的时候调用，		 * @param arg0状态,ViewPager.SCROLL_STATE_SETTLING（设置完成），ViewPager.SCROLL_STATE_IDLE（闲置），ViewPager.SCROLL_STATE_DRAGGING（拖动）*/				void setScrollState(int state);				//在下中		void loading();				/**		 * 滑动前调用的方法，		 * 默示在前一个页面滑动到后一个页面的时，在前一个页面滑动前调用的办法*/		void onPageScrolled();	}		public void stopLoading(){		if(isLoading==true){			isLoading = false;		}	}		public boolean isLoading(){		return isLoading = false;	}		private class MyOnPageChangeListener implements OnPageChangeListener{		/**此方法是在状态改变的时候调用，		 *	arg0状态ViewPager.SCROLL_STATE_SETTLING（设置完成），ViewPager.SCROLL_STATE_IDLE（闲置），ViewPager.SCROLL_STATE_DRAGGING（拖动）*/				@Override		public void onPageScrollStateChanged(int arg0) {			listener.setScrollState(arg0);		}		/**默示在前一个页面滑动到后一个页面的时辰，在前一个页面滑动前调用的办法*/		@Override		public void onPageScrolled(int arg0, float arg1, int arg2) {			if(arg2 == ViewPager.SCROLL_STATE_IDLE){				listener.onPageScrolled();			}		}		/**此方法是页面跳转完后得到调用，		 * arg0是你当前选中的页面的Position（位置编号）*/		@Override		public void onPageSelected(int arg0) {			mSelectedPageIndex = arg0;			currentView();			listener.getPagerNum(mSelectedPageIndex+1);			if(BasePreloadingViewPager.this.getAdapter().getCount()-MAX_NUM <= mSelectedPageIndex+1&&!isLoading){				isLoading = true;				listener.preLoading();			}		}			}			//反射机制   控制 viewpager滑动时间  为800	private void changeViewPageScroller() {		try {			Field mField = ViewPager.class.getDeclaredField("mScroller");			mField.setAccessible(true);			FixedSpeedScroller scroller;			scroller = new FixedSpeedScroller(mContext,new AccelerateDecelerateInterpolator());			mField.set(this, scroller);		} catch (Exception e) {		}	}	class FixedSpeedScroller extends Scroller {		private int mDuration = 800;		public FixedSpeedScroller(Context context) {			super(context);		}		public FixedSpeedScroller(Context context, Interpolator interpolator) {			super(context, interpolator);		}		@Override		public void startScroll(int startX, int startY, int dx, int dy,				int duration) {			super.startScroll(startX, startY, dx, dy, mDuration);		}		@Override		public void startScroll(int startX, int startY, int dx, int dy) {			super.startScroll(startX, startY, dx, dy, mDuration);		}		public void setmDuration(int time) {			mDuration = time;		}		public int getmDuration() {			return mDuration;		}	};	}